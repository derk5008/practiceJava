Basic LIST:

1. Two Classes: Note, List;

2. Every time it is start with "Head": Head is a node, but it is not the Object in list. The first object in List is head.getNext()

3. Head is the first item in list; and last item's link points to null;

4. All process, like "Insert", "Add", "Remove" are playing around with Current and next();

5. Add: loop to the last item;

6. insert/remove: loop to the item right before the wanted index. For example, insert(Obj, 5). The index will stop and point to the 4th item in list

7. In LinkedList, there two private property: Node head, int count


RESERVSE LIST:

Solution one: Iterator:
Key point: Simply reverse the link between two nodes. 
Have three nodes: Previous, current and next;
1. Assign currentNode.next to previousNode to reverse the link. If it is a start node, set previous node as null;
2. In each iteration, move currentNdoe and previous Node by 1 node: in code, 
previousNode=currentNode;  
currentNode=nextNode;
3. make sure reset the Head node...
head.setNext(currentNode);

Code:

Node previous = null;
	Node next;
	Node current=head.getNext();
	
	while(current!=null){
		next = current.getNext();
		current.setNext(previous);
		
		previous=current;
		head.setNext(current);
		current=next;


--A future question: reverse from one of node:
Then we need add a cut point node:

	Node previous=null;
	Node cutPoint = getNode(index-1);
	Node next;
	Node current = getNode(index);
	while(current!=null){
		next = current.getNext();
		current.setNext(previous);
		previous=current;
		cutPoint.setNext(current);
		current = next;
	}




Solution two: Recursive:

